drop table WITHDRAWALS_1;

create table WITHDRAWALS_1 (
	NO INTEGER NOT NULL AUTO_INCREMENT,
	SESSION VARCHAR(64),
	TXNO INTEGER NOT NULL,
	AMOUNT INTEGER NOT NULL,
	DOCUMENT VARCHAR(256) NOT NULL,
	COMMENT VARCHAR(256),
	REGISTER INTEGER NOT NULL,
	CASHIER VARCHAR(32) NOT NULL,
	TIME_CREATED TIMESTAMP,
	PRIMARY KEY(NO)
) ENGINE=InnoDB;

drop table DEPOSITS_1;

create table DEPOSITS_1 (
	NO INTEGER NOT NULL AUTO_INCREMENT,
	SESSION VARCHAR(64),
	TXNO INTEGER NOT NULL,
	AMOUNT INTEGER NOT NULL,
	DOCUMENT VARCHAR(256) NOT NULL,
	COMMENT VARCHAR(256),
	REGISTER INTEGER NOT NULL,
	CASHIER VARCHAR(32) NOT NULL,
	TIME_CREATED TIMESTAMP,
	PRIMARY KEY(NO)
) ENGINE=InnoDB;

drop table BANKNOTE;

create table BANKNOTE (
	BANKNOTE INTEGER NOT NULL,
	DESCRIPTION VARCHAR(32) NOT NULL,
	PRIMARY KEY (BANKNOTE)
) ENGINE=InnoDB;

drop table TERMINAL_COUNT;

create table TERMINAL_COUNT (
	TERMINALNO INTEGER NOT NULL,
	COUNTNO INTEGER NOT NULL,
	COUNTTS TIMESTAMP,
	BANKNOTE INTEGER NOT NULL,
	COUNT INTEGER NOT NULL,
	ACTUAL INTEGER NOT NULL,
	FOREIGN KEY (TERMINALNO) REFERENCES TERMINAL(TERMINALNO),
	FOREIGN KEY (BANKNOTE) REFERENCES BANKNOTE(BANKNOTE)
) ENGINE=InnoDB;


drop table ROLE;

create table ROLE (
	ROLE INTEGER NOT NULL,
	DESCRIPTION VARCHAR(64),
	PRIMARY KEY(ROLE)
) ENGINE=InnoDB;

drop table ROLES_FOR_USER;

create table ROLES_FOR_USERS (
	CARD VARCHAR(128) NOT NULL,
	ROLE INTEGER NOT NULL,
	FOREIGN KEY (CARD) REFERENCES CARD(CARDNO)
    	ON DELETE CASCADE,
    FOREIGN KEY (ROLE) REFERENCES ROLE(ROLE)
    	ON DELETE CASCADE
);

drop table DISCREPANCY_REPORT;

create table DISCREPANCY_REPORT (
	NO INTEGER NOT NULL AUTO_INCREMENT,
	DISCREPANCY ENUM ('COUNT', 'SATELLITE', 'OPENING'),
	DESCRIPTION VARCHAR(256),
	PRIMARY KEY (NO)
) ENGINE=InnoDB;




drop table COUNTS;

create table COUNTS (
    COUNTNO INTEGER NOT NULL AUTO_INCREMENT,
    TERMINAL VARCHAR(128) NOT NULL,
    COUNT_TIMESTAMP TIMESTAMP,
    CASH_SESSION VARCHAR(128) NOT NULL,
    TOTAL INTEGER NOT NULL,
    ACTUAL_TOTAL INTEGER,
    COMPLETED BOOLEAN,
    PRIMARY KEY(COUNTNO)
) ENGINE=InnoDB;

drop table COUNT_ENTRY;

create table COUNT_ENTRY (
    COUNTNO INTEGER NOT NULL,
    TERMINAL VARCHAR(128) NOT NULL,
    BANKNOTE INTEGER NOT NULL,
    BANKNOTE_COUNT INTEGER NOT NULL,
    ACTUAL_COUNT INTEGER,
    PRIMARY KEY(COUNTNO, TERMINAL, BANKNOTE)
) ENGINE=InnoDB;



insert into banknote values (10, '10 RUB');
insert into banknote values (50, '50 RUB');
insert into banknote values (100, '100 RUB');
insert into banknote values (500, '500 RUB');
insert into banknote values (1000, '1000 RUB');
insert into banknote values (5000, '5000 RUB');



' now let us try to create a trigger

DELIMITER $$

DROP TRIGGER AUTH_CREATE_CARD_FER
$$

CREATE TRIGGER AUTH_CREATE_CARD_FER BEFORE INSERT ON CARD FOR EACH ROW
BEGIN
    INSERT INTO PIN (PIN, STATE, COMMENT) VALUES (new.CARDNO, 'ACTIVE', '');
    INSERT INTO USER (USERNAME, PASSWORD, PIN, NAME, COMMENT) VALUES (CONCAT('PIN.', new.CARDNO), '1234', new.CARDNO, '', '');

    INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTTYPE, OWNER, BALANCE, ACCOUNTNAME) VALUES(CONCAT('PIN.', new.CARDNO), 2, new.CARDNO, 0, CONCAT('PIN Account for ', new.CARDNO));
    INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTTYPE, OWNER, BALANCE, ACCOUNTNAME) VALUES(CONCAT('PLAYER.CASH.PIN.', new.CARDNO), 4, new.CARDNO, 0, '');
    INSERT INTO ACCOUNT (ACCOUNTNO, ACCOUNTTYPE, OWNER, BALANCE, ACCOUNTNAME) VALUES(CONCAT('PLAYER.WIN.CASH.PIN.', new.CARDNO), 4, new.CARDNO, 0, '');
END
$$

DELIMITER ;


DELIMITER $$

DROP TRIGGER INSERT_DEPOSIT_TRIGGER
$$

CREATE TRIGGER INSERT_DEPOSIT_TRIGGER BEFORE INSERT ON DEPOSITS_1 FOR EACH ROW
BEGIN

    DECLARE cr_account VARCHAR(64);
    DECLARE settlement_account VARCHAR(64);
    
    SELECT ACCOUNTNO INTO cr_account FROM CASH_REGISTER WHERE LOCATION = new.REGISTER;
    
    INSERT INTO TRANSACTION_LOG(DEBIT, CREDIT, AMOUNT, TXTYPE, USERNAME, LOCATION) VALUES ('OUT.CASH.PRIKHOD', cr_account, new.AMOUNT, 6, new.CASHIER, new.REGISTER);
    
    UPDATE CR_SESSION SET CASH_BALANCE = CASH_BALANCE + new.AMOUNT WHERE CASH_REGISTER = new.REGISTER;

END
$$

DELIMITER ;


DELIMITER $$

DROP TRIGGER INSERT_WITHDRAWAL_TRIGGER
$$

CREATE TRIGGER INSERT_WITHDRAWAL_TRIGGER BEFORE INSERT ON WITHDRAWALS_1 FOR EACH ROW
BEGIN

    DECLARE cr_account VARCHAR(64);
    DECLARE settlement_account VARCHAR(64);
    
    SELECT ACCOUNTNO INTO cr_account FROM CASH_REGISTER WHERE LOCATION = new.REGISTER;
    
    INSERT INTO TRANSACTION_LOG(DEBIT, CREDIT, AMOUNT, TXTYPE, USERNAME, LOCATION) VALUES (cr_account, 'OUT.CASH.RASKHOD', new.AMOUNT, 7, new.CASHIER, new.REGISTER);
    
    UPDATE CR_SESSION SET CASH_BALANCE = CASH_BALANCE - new.AMOUNT WHERE CASH_REGISTER = new.REGISTER;

END
$$

DELIMITER ;


DELIMITER $$

DROP TRIGGER RECONCILE_BALANCE_TRIGGER
$$

CREATE TRIGGER RECONCILE_BALANCE_TRIGGER BEFORE UPDATE ON OPENING_BALANCE FOR EACH ROW
BEGIN
    DECLARE is_reconciled BOOLEAN;
    DECLARE cash_reserve_amt INTEGER;
    DECLARE card_balance INTEGER;
    DECLARE period_id INTEGER;
    
    IF new.RECONCILED THEN

        SELECT CASH_RESERVE INTO cash_reserve_amt
            FROM CASH_REGISTER WHERE LOCATION = new.CASH_REGISTER;
            
        IF NOT EXISTS (SELECT * FROM ACCOUNTING_PERIOD WHERE PERIODID > new.ACCOUNTING_PERIOD) THEN
            INSERT INTO ACCOUNTING_PERIOD (NAME) VALUES (CONCAT('APERIOD-', CURRENT_TIMESTAMP));
        END IF;
        
        SELECT MAX(PERIODID) INTO period_id FROM ACCOUNTING_PERIOD;

        SELECT SUM(BALANCE) INTO card_balance FROM ACCOUNT 
            WHERE accountno like 'CREDITS.GAME.TERM%' OR accountno like 'GAMEESCROW.GAME.TERM%' OR accountno like 'TERMACCNT%' OR (accountno like '%PIN%' AND NOT (accountno like '%CASH%'));
            
        INSERT INTO CR_SESSION (SESSIONID, CASH_REGISTER, OPENING_TIME, CASH_RESERVE, CARDS_BALANCE, CASH_BALANCE, CARD, ACCOUNTING_PERIOD)
            VALUES(CONCAT('CR-Session-CRNo-', CAST(new.CASH_REGISTER AS CHAR), '-', CURRENT_TIMESTAMP), new.CASH_REGISTER, CURRENT_TIMESTAMP, cash_reserve_amt, card_balance, new.CASH_RESERVE_ACTUAL, new.CARD, period_id);
            
        UPDATE CASH_REGISTER SET STATE='OPEN' WHERE LOCATION = new.CASH_REGISTER;    

    END IF;
END
$$ 

DELIMITER ;


DELIMITER $$

DROP TRIGGER UPDATE_CASH_REGISTER_TRIGGER
$$

CREATE TRIGGER UPDATE_CASH_REGISTER_TRIGGER BEFORE UPDATE ON CASH_REGISTER FOR EACH ROW
BEGIN

    UPDATE CR_SESSION SET CASH_RESERVE = new.CASH_RESERVE WHERE CASH_REGISTER = new.LOCATION;

END
$$

DELIMITER ;


drop table OPENING_BALANCE;

create table OPENING_BALANCE (
    RECORDID INTEGER NOT NULL AUTO_INCREMENT,
    CASH_REGISTER INTEGER NOT NULL,
    SATELLITE BOOLEAN NOT NULL,
    RECONCILED BOOLEAN NOT NULL,
    CASH_RESERVE INTEGER NOT NULL,
    INCASSO INTEGER NOT NULL,
    CASH_RESERVE_ACTUAL INTEGER,
    INCASSO_ACTUAL INTEGER,
    COMMENT VARCHAR(128),
    RECONCILED_TS TIMESTAMP,
    PRIMARY KEY(RECORDID)
) ENGINE=InnoDB;

drop table CR_SESSION;

create table CR_SESSION (
    SESSIONID VARCHAR(64) NOT NULL,
    CASH_REGISTER INTEGER NOT NULL,
    OPENING_TIME VARCHAR(64) NOT NULL,
    CASH_RESERVE INTEGER NOT NULL,
    CARDS_BALANCE INTEGER NOT NULL,
    CASH_BALANCE INTEGER NOT NULL,
    CARD VARCHAR(128) NOT NULL,
    ACCOUNTING_PERIOD NUMBER NOT NULL,
    PRIMARY KEY(SESSIONID)
) ENGINE=InnoDB;


' There might be two non-closed accounting periods available at the same time

drop table ACCOUNTING_PERIOD;

create table ACCOUNTING_PERIOD (
    PERIODID INTEGER NOT NULL AUTO_INCREMENT,
    OPENTS TIMESTAMP NOT NULL,
    CLOSETS TIMESTAMP,
    NAME VARCHAR(128) NOT NULL,
    CLOSED BOOLEAN NOT NULL,
    PRIMARY KEY(PERIODID)
) ENGINE=InnoDB;


drop table CURRENT_DAY;

create table CURRENT_DAY (
    CURRENT_DAY INTEGER NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(128) NOT NULL,
    STATE ENUM ('OPEN', 'CLOSED') NOT NULL,
    INITIALTS TIMESTAMP NOT NULL,
    LASTTS TIMESTAMP,
    PRIMARY KEY(CURRENT_DAY)
) ENGINE=InnoDB;

drop table if exists CASH_REGISTER_1;

' STATE column:
'  OPEN - cashier is currently logged in
'  CLOSED - cashier temporary logged out but the chash register is not closed for the day
'  RECONCILED - cashoer closed down cash register for the day
' REGISTER_TYPE column:
'  MAIN - main cash register
'  SATTELITE - satellite cash register
'  OTHER - other (reserved for future development)

CREATE TABLE CASH_REGISTER_1 (
  
  REGISTER_ID    INTEGER NOT NULL AUTO_INCEREMENT,					' Primary cash register ID
  NAME           varchar(62) NOT NULL,								' Publicly displayed cash register name
  LOCATION       int(11)     NOT NULL,								' Location number; do we still want it to be a primary key? (FK to LOCATION)
  STATE          enum('OPEN','CLOSED','RECONCILED') DEFAULT NULL,	' Used to filter cash registers by state
  ROLE           int(11)     NOT NULL,								' Role required to operate this cash register (FK to ROLE)
  CASH_RESERVE   int(11)     NOT NULL,								' Pre-set amount of cash reserves
  ACCOUNT        varchar(64) NOT NULL,								' Cash account number for this cash register; used to determine current cash amount in the register (FK to ACCOUNT)
  OPERDAY        INTEGER     NOT NULL,								' Oper. day number (FK to OPERDAY)		
  CARD           varchar(128) DEFAULT NULL,							' User currently logged in in this cash register; this column is populated even if the cash register is in CLOSED state (FK to CARD)
  REGISTER_TYPE  enum('MAIN','SATTELITE','OTHER') NOT NULL,			' Register type - main cash register (one per gaming venue), satellite (zero or more) 
  
  PRIMARY KEY (REGISTER_ID),
  
  FOREIGN KEY(LOCATION) REFERENCES LOCATION(LOCATIONNO)
      ON DELETE CASCADE,
  FOREIGN KEY(ROLE) REFERENCES ROLE(ROLE)
      ON DELETE CASCADE,
  FOREIGN KEY(ACCOUNT) REFERENCES ACCOUNT(ACCOUNTNO)
      ON DELETE CASCADE,
  FOREIGN KEY(OPERDAY) REFERENCES OPERDAY(OPERDAY_ID)
      ON DELETE CASCADE,
  FOREIGN KEY(CARD) REFERENCES CARD(CARDNO)
      ON DELETE CASCADE
  
) ENGINE=InnoDB;


DROP TABLE IF EXISTS OPERDAY (

  OPERDAY_ID   INTEGER NOT NULL AUTO_INCREMENT,
  OPERDAY_DATE DATE NOT NULL,
  OPERDAY_NUM  INTEGER NOT NULL,
  
  PRIMARY KEY(OPERDAY_ID)
  
) ENGINE=InnoDB;